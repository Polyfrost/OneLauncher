//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "cluster_packages")]
#[onelauncher_macro::specta]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub cluster_id: i32,
	#[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
	pub package_hash: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::clusters::Entity",
		from = "Column::ClusterId",
		to = "super::clusters::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Clusters,
	#[sea_orm(
		belongs_to = "super::packages::Entity",
		from = "Column::PackageHash",
		to = "super::packages::Column::Hash",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	Packages,
}

impl Related<super::clusters::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Clusters.def()
	}
}

impl Related<super::packages::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Packages.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
