//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "setting_profiles")]
#[onelauncher_macro::specta]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
	pub name: String,
	pub java_id: Option<i32>,
	pub res_w: Option<i32>,
	pub res_h: Option<i32>,
	pub force_fullscreen: Option<bool>,
	pub mem_max: Option<i32>,
	#[sea_orm(column_type = "Text", nullable)]
	pub launch_args: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub launch_env: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub hook_pre: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub hook_wrapper: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub hook_post: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::clusters::Entity")]
	Clusters,
	#[sea_orm(
		belongs_to = "super::java_versions::Entity",
		from = "Column::JavaId",
		to = "super::java_versions::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	JavaVersions,
}

impl Related<super::clusters::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Clusters.def()
	}
}

impl Related<super::java_versions::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::JavaVersions.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
