//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.5

use merge::Merge;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::{resolution::Resolution, settings::SettingsOsExtra};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, Merge)]
#[sea_orm(table_name = "setting_profiles")]
#[onelauncher_macro::specta]
#[merge(strategy = merge::option::overwrite_none)]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
	#[merge(skip)]
	pub name: String,
	pub java_id: Option<i64>,
	#[sea_orm(column_type = "Text", nullable)]
	pub res: Option<Resolution>,
	pub force_fullscreen: Option<bool>,
	pub mem_max: Option<u32>,
	#[sea_orm(column_type = "Text", nullable)]
	pub launch_args: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub launch_env: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub hook_pre: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub hook_wrapper: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub hook_post: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub os_extra: Option<SettingsOsExtra>
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::clusters::Entity")]
	Clusters,
	#[sea_orm(
		belongs_to = "super::java_versions::Entity",
		from = "Column::JavaId",
		to = "super::java_versions::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	JavaVersions,
}

impl Related<super::clusters::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Clusters.def()
	}
}

impl Related<super::java_versions::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::JavaVersions.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}

const GLOBAL_NAME: &str = "Global";

impl ActiveModel {
	pub fn is_global(&self) -> bool {
		self.name.try_as_ref().map(|name| name == GLOBAL_NAME).unwrap_or(false)
	}
}

impl Model {
	pub fn is_global(&self) -> bool {
		self.name == GLOBAL_NAME
	}

	pub fn default_global_profile() -> Self {
		Self {
			name: GLOBAL_NAME.into(),
			force_fullscreen: Some(false),
			hook_post: None,
			hook_pre: None,
			hook_wrapper: None,
			java_id: None,
			launch_args: None,
			launch_env: None,
			mem_max: Some(2048),
			res: None,
			os_extra: Some(SettingsOsExtra::default())
		}
	}
}
